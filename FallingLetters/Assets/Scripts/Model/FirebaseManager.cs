using System.Collections.Generic;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using UnityEngine;

/// <summary>
/// 
///  This class is responsible for connection between the client side (C#)
///  and the server side (FastAPI python).
///  This class directly access the server to access the database.
/// 
///  This class contains AI generated content.
/// 
/// </summary>
public class FirebaseManager
{
    private static readonly HttpClient _client = new HttpClient();
    
    // FastApi running on port 8000 in localhost.
    private const string BASE_URL = "http://127.0.0.1:8000"; 

    /// <summary>
    /// 
    ///  This asynchronous method communicate with the FastAPI endpoint "register" to 
    ///  to register new users.
    /// 
    ///  This function is generated by the LLM ChatGPT (GPT-4) by OpenAI.
    ///  Other similar type of functions are also referred from this function.
    ///
    /// </summary>
    /// 
    /// <param name="email"> email provided by the user </param>
    /// <param name="password"> password provided by the user </param>
    /// <param name="username"> username provided by the user </param>
    /// 
    /// <returns> returns RegisterResponse type object </returns>
    public async Task<DataRegisterResponse> Register(string email, string password, string username)
    {
        var registerUser = new DataRegisterUser { email = email, password = password, username = username };
        string json = JsonConvert.SerializeObject(registerUser);

        HttpContent content = new StringContent(json, Encoding.UTF8, "application/json");

        HttpResponseMessage response = await _client.PostAsync($"{BASE_URL}/register", content);
        string responseString = await response.Content.ReadAsStringAsync();

        if (!response.IsSuccessStatusCode)
        {
            var errorData = JsonConvert.DeserializeObject<DataErrorResponse>(responseString);
            Debug.Log(errorData.detail);
            return new DataRegisterResponse(){
                server_response=errorData.detail.Split(":")[0]
            };
        }

        DataRegisterResponse registerResponse =JsonConvert.DeserializeObject<DataRegisterResponse>(responseString);
        registerResponse.server_response = "success";
        return registerResponse;
    }

    /// <summary>
    /// 
    ///  This asynchronous method communicate with the FastAPI endpoint "login" to 
    ///  to log in registered users.
    /// 
    /// </summary>
    /// 
    /// <param name="email"> email provided by the user  </param>
    /// <param name="password"> password provided by the user </param>
    /// 
    /// <returns> returns a LoginResponse object </returns>
    public async Task<DataLoginResponse> Login(string email, string password)
    {
        var loginUser = new DataLoginUser { email = email, password = password };
        string json = JsonConvert.SerializeObject(loginUser);

        HttpContent content = new StringContent(json, Encoding.UTF8, "application/json");

        HttpResponseMessage response = await _client.PostAsync($"{BASE_URL}/login", content);
        string responseString = await response.Content.ReadAsStringAsync();

        if (!response.IsSuccessStatusCode)
        {
            var errorData = JsonConvert.DeserializeObject<DataErrorResponse>(responseString);
            Debug.Log(errorData.detail);
            return new DataLoginResponse(){
                server_response=ExtractErrorMessage(errorData.detail)
            };
        }

        DataLoginResponse loginResponse = JsonConvert.DeserializeObject<DataLoginResponse>(responseString);
        loginResponse.server_response ="success";
        return loginResponse;
    }

    /// <summary>
    /// 
    ///  This asynchronous method is used to get all the player details through FastAPI endpoint
    ///  from server that communicates with firebase.
    ///  
    ///  This function is generated by the LLM ChatGPT (GPT-4) by OpenAI.
    /// 
    /// </summary>
    /// 
    /// <param name="token"> token user received by firebase </param>
    /// <returns> returns a list of objects in GetUsers type </returns>
    public async Task<List<DataGetUsers>> GetLeaderboard(string token)
    {
        _client.DefaultRequestHeaders.Clear();
        _client.DefaultRequestHeaders.Add("token", token);

        HttpResponseMessage response = await _client.GetAsync($"{BASE_URL}/protected/Leaderboard");
        string responseString = await response.Content.ReadAsStringAsync();

        if (!response.IsSuccessStatusCode)
        {
            Debug.LogError($"Leaderboard Error: {responseString}");
            return null;
        }

        return JsonConvert.DeserializeObject<List<DataGetUsers>>(responseString);
    }

    /// <summary>
    /// 
    ///  This asynchronous method is used to update the user score in database
    ///  when the user achieves a new highest score.
    /// 
    ///  This function is generated by the LLM ChatGPT (GPT-4) by OpenAI.
    /// 
    /// </summary>
    /// 
    /// <param name="newScore"> users new high score </param>
    /// <param name="token"> token user received by firebase </param>
    public async Task UpdateScore(int newScore, string token)
    {
        var updateRequest = new DataUpdateScore { score = newScore };
        string json = JsonConvert.SerializeObject(updateRequest);

        _client.DefaultRequestHeaders.Clear();
        _client.DefaultRequestHeaders.Add("token", token);

        HttpContent content = new StringContent(json, Encoding.UTF8, "application/json");

        HttpResponseMessage response = await _client.PutAsync($"{BASE_URL}/protected/UpdateScore", content);
        string responseString = await response.Content.ReadAsStringAsync();

        if (!response.IsSuccessStatusCode)
        {
            Debug.LogError($"Update Score Error: {responseString}");
        }

    }

    /// <summary>
    /// 
    ///  This asynchronous method is used to send a password resetting email to users
    ///  through the FastAPI server.
    /// 
    ///  This function is generated by the LLM ChatGPT (GPT-4) by OpenAI.
    /// 
    /// </summary>
    /// 
    /// <param name="email"> email entered by user </param>
    /// 
    /// <returns> returns a "success" or "error" string </returns>
    public async Task<string> DataForgetPassword(string email) 
    {
        var forgetPassword = new  { request_email = email };
        string json = JsonConvert.SerializeObject(forgetPassword);

        HttpContent content = new StringContent(json, Encoding.UTF8, "application/json");

        HttpResponseMessage response = await _client.PostAsync($"{BASE_URL}/auth/forgot-password", content);
        string responseString = await response.Content.ReadAsStringAsync();

        if (!response.IsSuccessStatusCode)
        {
            Debug.LogError($"Forget Password Error: {responseString}");
            return "error";
        }

        Debug.Log("Password reset link successfully sent!");
        return "success";
    }

    /// <summary>
    /// 
    ///  This method is used to determine errors produced by the login function
    /// 
    ///  This function is generated by the LLM ChatGPT (GPT-4) by OpenAI.
    /// 
    /// </summary>
    /// 
    /// <param name="errorMessage"> error message sent by the server </param> 
    /// 
    /// <returns> returns the identified error </returns>
    private string ExtractErrorMessage(string errorMessage)
    {
        if (errorMessage.Contains("INVALID_LOGIN_CREDENTIALS")|| errorMessage.Contains("INVALID_EMAIL"))
        {
            return "Incorrect email or password";
        }

        if (errorMessage.Contains("USER_DISABLED"))
        {
            return "Account is disabled";
        }

        return errorMessage;
    }

}
