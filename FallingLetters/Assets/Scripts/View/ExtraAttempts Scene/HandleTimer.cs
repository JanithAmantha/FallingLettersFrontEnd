using UnityEngine;
using TMPro;
using System;

/// <summary>
/// 
///  This class is used to run a 10 second timer after the image is loaded 
///  to the GUI. Purpose of it is to limit the time the players have to think.
///  The timer is handled by an event. (Observer pattern)
///  
///  This class contains AI generated content.
/// 
/// </summary>
public class HandleTimer : MonoBehaviour {
    private float _timer = 10f;
    private bool _timerRunning = true;
    [SerializeField] private TMP_Text _timerText;

    // An event is created to be triggered upon timer reaching 0.
    private event Action OnTimeUp; 

    /// <summary>
    ///   
    ///   The start function which is always executed once, is used to subscribe
    ///   HandleTimeUp(), the observer function to the OnTimeUp event. HandleTimeUp will be called 
    ///   when OnTimeUp event occurs.
    /// 
    /// </summary>
    private void Start()
    {
        OnTimeUp += HandleTimeUp;
    }

    /// <summary>
    /// 
    ///  Update function which will be executed in every frame to check if the image has loaded
    ///  into GUI to start the timer. Then it will call the UpdateTimer() until timer reaches 0
    ///  and ends the scene.
    /// 
    /// </summary>
    private void Update()
    {
        if(APIConnection.imageUnlocked)
        {
            UpdateTimer();
        }
    }

    /// <summary>
    /// 
    ///  This function is used run the timer and invoke the OnTimeUp
    ///  event when the timer reacher 0s.
    /// 
    ///  This function is generated by the LLM ChatGPT (GPT-4) by OpenAI.
    /// 
    /// </summary>
    private void UpdateTimer()
    {
        if (_timerRunning)
        {
            _timer -= Time.deltaTime;
            _timerText.text = "Time : " + Mathf.Ceil(_timer).ToString();

            if (_timer <= 0f)
            {
                _timer = 0f;
                _timerRunning = false;
                OnTimeUp?.Invoke(); 
            }
        }
    }

    /// <summary>
    ///  
    ///  HandleTimeUp function which is also the subscriber of the OnTimeUp event will be automatically called
    ///  when the OnTimeUp event is invoked. This function will Load the GameOver Scene.
    /// 
    /// </summary>
    private void HandleTimeUp()
    {
        Debug.Log("Time's up! Game over.");
        HandleGameLogic.Instance.GameOver();
    }

    /// <summary>
    /// 
    ///  This function is used to unsubscribe the HandleTimeUp function from the OnTimeUp event.
    ///  This is only executed when the GUI component is being destroyed (when the scene changes.)
    ///  
    /// </summary>
    private void OnDestroy()
    {
        OnTimeUp -= HandleTimeUp;
    }
}