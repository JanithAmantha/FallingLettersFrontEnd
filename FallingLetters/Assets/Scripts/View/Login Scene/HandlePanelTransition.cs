using UnityEngine;

/// <summary>
///  
///  This class is used in Login scene to perform panel transition on the same scene.
///  The purpose of this class is to reduce the overhead of having to create separate scenes
///  for each functionality such as login and register. This class eliminates that overhead by 
///  performing panel transition instead of destroying and loading new scenes.
/// 
///  Singleton design pattern is also demonstrated in this class.
/// 
///  This class contains AI generated content.
/// 
/// </summary>
public class HandlePanelTransition : MonoBehaviour
{
    [SerializeField] private Transform _canvas;
    [SerializeField] private static GameObject _activePanel;
    [SerializeField] private Transform _spawnPoint;
    [SerializeField] private GameObject _loginPage;
    private static HandlePanelTransition _instance;

    //Getter
    public static HandlePanelTransition Instance{
        get{
            return _instance;
        }
    }

    /// <summary>
    /// 
    ///  This start function is the starting point of the GUI of the game.
    ///  When the game is loaded the start function spawns the login panel.
    /// 
    ///  Also, the start function executes Singleton pattern by only allowing a single
    ///  instance of this class. This function does not allow more than 1 instance from this
    ///  class. 
    /// 
    ///  The reason for singleton instantiation is the necessity of using the same variables and
    ///  methods of the instance which is running on Unity Engine within other classes. Since objects
    ///  from "MonoBehaviour" children can not be created, this method is followed. 
    /// 
    /// </summary>
    private void Start()
    {
        if (_instance != null && _instance != this)
        {
            Destroy(gameObject);
        }
        else
        {
               _instance = this;
        }
        SpawnPanel(_loginPage);
    }
    
    /// <summary>
    /// 
    ///  Responsibility of this function is to keep track of the panel that is active
    ///  currently and to load the next panel by destroying the currently active panel.
    /// 
    ///  This function is generated by the LLM ChatGPT (GPT-4) by OpenAI.
    /// 
    /// </summary>
    /// 
    /// <param name="gameObject"> Panel to be spawned next after a click event </param>
    public void SpawnPanel(GameObject gameObject){

        if(_activePanel != null)
        {
            Destroy(_activePanel);
        }
        _activePanel = Instantiate(gameObject, _spawnPoint.position, Quaternion.identity);
        GameObject panelInstance = _activePanel;
        panelInstance.transform.SetParent(_canvas, false);
        panelInstance.GetComponent<RectTransform>().anchoredPosition = Vector2.zero;
    }
}
