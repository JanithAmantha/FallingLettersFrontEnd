using TMPro;
using System.Text.RegularExpressions;


/// <summary>
/// 
///  Class That performs input validation for login, register and forget password tasks. 
/// 
///  This class contains AI generated content.
/// 
/// </summary>
public class InputValidator
{
    /// <summary>
    /// 
    ///  Static because it can be used without instantiating the class.
    ///  Check if the input fields are empty and displays a message.
    ///  
    ///  This function is generated by the LLM ChatGPT (GPT-4) by OpenAI.
    /// 
    /// </summary>
    /// 
    /// <param name="input"> text within inputField. </param>
    /// <param name="warningText"> Text to display the message. </param>
    /// <param name="fieldName"> Name of the validating input field. </param>
    /// 
    /// <returns> returns a boolean value </returns>
    public static bool IsFieldEmpty(string input, TMP_Text warningText, string fieldName)
    {
        if (string.IsNullOrWhiteSpace(input))
        {
            warningText.text = fieldName + " cannot be empty!";
            return true;
        }
        warningText.text = "";
        return false;
    }

    /// <summary>
    /// 
    ///  Static because it can be used without instantiating the class.
    ///  Check if the email is valid and displays a message.
    ///  
    ///  This function is generated by the LLM ChatGPT (GPT-4) by OpenAI.
    /// 
    /// </summary>
    /// 
    /// <param name="email"> email text </param>
    /// <param name="warningText"> Text to display the message. </param>
    /// 
    /// <returns> returns a boolean value </returns>
    public static bool IsValidEmail(string email, TMP_Text warningText)
    {
        string emailPattern = @"^[^@\s]+@[^@\s]+\.[^@\s]+$";
        if (!Regex.IsMatch(email, emailPattern))
        {
            warningText.text = "Invalid email format!";
            return false;
        }
        warningText.text = "";
        return true;
    }

    /// <summary>
    /// 
    ///  Static because it can be used without instantiating the class.
    ///  Check if the password is valid and displays a message.
    ///  
    ///  This function is generated by the LLM ChatGPT (GPT-4) by OpenAI.
    /// 
    /// </summary>
    /// 
    /// <param name="password"> password text </param>
    /// <param name="warningText"> Text to display the message. </param>
    /// 
    /// <returns> returns a boolean value </returns>
    public static bool IsPasswordValid(string password, TMP_Text warningText)
    {
        if (password.Length < 6)
        {
            warningText.text = "Password must be at least 6 characters!";
            return false;
        }
        warningText.text = "";
        return true;
    }

    /// <summary>
    /// 
    ///  Static because it can be used without instantiating the class.
    ///  Check if the passwords match and displays a message.
    ///  
    ///  This function is generated by the LLM ChatGPT (GPT-4) by OpenAI.
    /// 
    /// </summary>
    /// 
    /// <param name="password"> password text </param>
    /// <param name="confirmPassword"> confirmPassword text </param>
    /// <param name="warningText"> Text to display the message. </param>
    /// 
    /// <returns> returns a boolean value </returns>
    public static bool DoPasswordsMatch(string password, string confirmPassword, TMP_Text warningText)
    {
        if (password != confirmPassword)
        {
            warningText.text = "Passwords do not match!";
            return false;
        }
        warningText.text = "";
        return true;
    }
}
